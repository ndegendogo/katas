——————————————————————————————————————————
1) Hello Java

Languages: Java
Primary Language: Java
Keywords: Java, Hello World, stdout, compiling Java, running Java

a) Program Hello World in Java.
The program shall display the following text on the screen:

$ java Hello

Hello, world!

b) How do you compile Java programs?
Commandline:

javac Hello.java

Commandline is fine for very simple programs like this one: only one single class, only default package.
If the program is larger, you need to add options - then a makefile or ant file helps.
Alternatively use an IDE like Eclipse.

c) How do you run Java programs?
java Hello

d) What is the signature of the main method?
    public static void main(String[]);

e) What happens if you change something about the signature of the main method?
It compiles, but cannot run:
- the runtime needs public to access the method.
- the runtime needs static because it starts with no instance of the class created.
- the runtime needs the parameters and return type because this is the method signature it looks for.

f) What is the relationship between the file name and the class name?
The strongly recommended default is to match the file name with the class name, 
although it is possible to put a non-public class into a file with different name.
But if I try this with a public class, I get a compile-time error message. 

g) Can you explain why you need to run the program with java Hello, not java Hello.class?
Hello is the name of the class, whereas Hello.class is the name of the class file which contains this class.
The Java language is designed to be platform-independent, but files and their names differ between operating systems,
and the mapping between a class and its class file is implementation-specific.
So the platform-independent way is to use not the class file name, but the class name. 

h) Could you use a filename without the suffix .java?
The Java spec does not mandate this filename suffix, so a compliant Java implementation is allowed even for systems
with filenames (8 + 3). However, on Windows and Unix systems the usual strategy is to use the .java extension for
Java source files. In any case, the Java compiler needs to support it if other extensions shall be used.
I did not find any option for this.
=> Feedback from Nelkinda: No. The suffix .java is mandatory.

i) Could you create a filename without the suffix .class?
The mapping between a class and its class file is implementation-specific, but on Windows and Unix systems the usual strategy
is to use the .class extension for class files. 
Besides this, .jar files and zip files are supported by the Java bootstrap class loader (supplied by the Java runtime).
I did not find an option for the compiler to generate a class file with different extension, 
nor for the Java runtime to load such a class file.
I guess that a user-defined class loader would be needed then.

j) How would you test the program?
A simple program like this I just run and observe the output.
In more complex situations I could use unit tests or other testing methods, it depends.

k) What happens if you call the program like this?

$ java Hello Foo Bar

Foo Bar are the arguments for the Java program.
I can access them via the String[] parameter given to the main method.


——————————————————————————————————————————
2) Hello Make

Languages: make, bash
Primary Language: make
Keywords: Hello World, stdout, Makefiles

a) Program Hello World as Makefile.
The program shall display the following text on the screen:

$ make -s

Hello, world!

$ make -s hello

Hello, world!

$ make -s all

Hello, world!

$ make -s foo

make: *** No rule to make target `foo'. Stop.

b) What is purpose of make?
Purpose is to support a build process with dependencies.
Usually the build process has several steps,
such as preprocessor - compiler - assembler - linker.
make supports an incremental build: when I modify only one source file, then it is not necessary to compile the other source files. 

c) How do you run Makefiles?
I call 'make' from the commandline and give a list of the targets to be built.
If I give no target, it defaults to the first target in the makefile.

d) How do you execute commands in Makefiles?
I use shell commands, each on a line, and precede them with a tab.

——————————————————————————————————————————
Hello Ant

Languages: Ant, XML
Primary Language: Ant
Keywords: Hello World, stdout, Ant, build.xml

a) Program Hello World as Ant build.xml script.

The program shall display the following text on the screen:

$ ant -q

   [echo] Hello, world!


BUILD SUCCESSFUL

Total time: 0 seconds

$ ant -q all

   [echo] Hello, world!


BUILD SUCCESSFUL

Total time: 0 seconds

$ ant -q hello

   [echo] Hello, world!


BUILD SUCCESSFUL

Total time: 0 seconds

$ ant -q foo


BUILD FAILED

Target "foo" does not exist in the project "null".


Total time: 0 seconds

b) How do you write ant scripts?
Ant scripts are written in XML syntax. The default name is build.xml, but I can use any other name.
The hierarchy of the XML elements is: project - target - task.

c) How do you run ant scripts?
From the commandline:
ant [options] [targets]

popular options are:
-q                   // quiet output
-f <buildfile> 	     // if I don't use the default name


d) What is project element and target element?
project is the top-level XML element in an ant file.
It has target elements as child elements.
A target is "something I want build", I can reference it from the command line.

e) What error you get when you remove the project element? 
The build fails, I get the error message 'Unexpected element "{}target"'

f) What is the error you get when you remove the target element?
When I remove all target elements it is still legal syntax, but I cannot use it to build anything.
I get an error message about a non-existing target.
When I call it with no targets and have no defaut target specified the (empty) build succeeds.

g) What are the attributes of project element?
name	        its name
default		the default target
basedir		the base directoriy for the source files of the targets.
All these are optional attributes.

h) What are the attributes of target element?
The most important are:
name		its name, this one is mandatory (else I couldn't reference it)
depends		list of prerequsites
There are more attributes: 'description' can be used to document a target. 
'if' and 'unless' can be used for conditional builds.

i) What do you see if you run ant -projecthelp?
j) How can you make the output of ant -projecthelp more convenient?
